knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(corrplot)
library(forcats)
library(randomForest)
library(gbm)
load("ames_train.Rdata")
load("ames_test.Rdata")
load("ames_validation.Rdata")
load("predict.Rdata")
train = ames_train %>%
mutate(datset = "train")
test = ames_test %>%
mutate(datset = "test")
valid = ames_validation %>%
mutate(datset = "valid")
dat = train %>%
rbind(., test) %>%
rbind(., valid)
findNA = function(col){
numNA = sum(is.na(col) | col == "")
type = class(col)
level = paste(as.character(levels(col)), collapse = ";")
large_0 = sum(table(col) > 0)
return(c(numNA, type, level, large_0))
}
train_info = lapply(dat, findNA)
train_info = as.data.frame(do.call(rbind, train_info), stringsAsFactors = F)
colnames(train_info) = c("numNA", "class", "level")
train_info$numNA = as.numeric(train_info$numNA)
train_info$missing_ratio = train_info$numNA/nrow(ames_train)
train_info$names = rownames(train_info)
features_drop = rownames(train_info)[train_info$missing_ratio > 0.5]
features_remain = rownames(train_info)[train_info$missing_ratio <= 0.5]
dat1 = dat[, c(features_remain)]
# Bsmt.Exposure
dat1$Bsmt.Exposure[dat1$Bsmt.Exposure == "" &
!is.na(dat1$Bsmt.Exposure)] = names(sort(table(dat1$Bsmt.Exposure),
decreasing = T))[1]
dat1$Mas.Vnr.Type[dat1$Mas.Vnr.Type == ""] = "None"
dat1$Electrical[dat1$Electrical == ""] = names(sort(table(dat1$Electrical),
decreasing = T))[1]
dat1$BsmtFin.Type.2[dat1$BsmtFin.Type.2 == "" &
!is.na(dat1$BsmtFin.Type.2)] = NA
dat2 = dat1 %>%
dplyr::select(-Garage.Yr.Blt) %>%
filter(PID != 903426160) %>%
mutate(MS.SubClass = as.factor(MS.SubClass),
Lot.Frontage = ifelse(is.na(Lot.Frontage), 0, Lot.Frontage),
#Fireplace.Qu = fct_explicit_na(Fireplace.Qu, "Unknown"),
#Fireplace.Qu = as.numeric(factor(Fireplace.Qu,
#                                  levels = c("Unknown", "Po", "Fa",
#                                             "TA", "Gd", "Ex"))),
Garage.Cond = fct_explicit_na(Garage.Cond, "Unknown"),
Garage.Cond = as.numeric(factor(Garage.Cond,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Garage.Qual = fct_explicit_na(Garage.Qual, "Unknown"),
Garage.Qual = as.numeric(factor(Garage.Qual,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Garage.Type = fct_explicit_na(Garage.Type, "Unknown"),
Garage.Finish = fct_explicit_na(Garage.Finish, "Unknown"),
Garage.Finish = as.numeric(factor(Garage.Finish,
levels = c("Unknown", "Unf",
"RFn", "Fin"))),
Bsmt.Qual = fct_explicit_na(Bsmt.Qual, "Unknown"),
Bsmt.Qual = as.numeric(factor(Bsmt.Qual,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Bsmt.Cond = fct_explicit_na(Bsmt.Cond, "Unknown"),
Bsmt.Cond = as.numeric(factor(Bsmt.Cond,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Bsmt.Exposure = fct_explicit_na(Bsmt.Exposure, "Unknown"),
Bsmt.Exposure = as.numeric(factor(Bsmt.Exposure,
levels = c("Unknown", "No", "Mn",
"Av", "Gd"))),
BsmtFin.Type.1 = fct_explicit_na(BsmtFin.Type.1, "Unknown"),
BsmtFin.Type.1 = as.numeric(factor(BsmtFin.Type.1,
levels = c("Unknown", "Unf","LwQ",
"Rec", "BLQ",
"ALQ", "GLQ"))),
BsmtFin.Type.2 = fct_explicit_na(BsmtFin.Type.2, "Unknown"),
BsmtFin.Type.2 = as.numeric(factor(BsmtFin.Type.2,
levels = c("Unknown", "Unf","LwQ",
"Rec", "BLQ",
"ALQ", "GLQ"))),
Mas.Vnr.Area = ifelse(is.na(Mas.Vnr.Area), 0, Mas.Vnr.Area),
Utilities = as.numeric(factor(Utilities,
levels = c("ELO","NoSeWa","NoSewr","AllPub"))),
Lot.Shape = as.numeric(factor(Lot.Shape,
levels = c("IR3","IR2","IR1","Reg"))),
Exter.Qual= as.numeric(factor(Exter.Qual,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Land.Slope =  as.numeric(factor(Land.Slope,
levels = c("Sev", "Mod","Gtl"))),
Exter.Cond = as.numeric(factor(Exter.Cond,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Heating.QC = as.numeric(factor(Heating.QC,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Electrical = as.numeric(factor(Electrical,
levels = c("Mix", "FuseP",
"FuseF", "FuseA", "SBrkr"))),
Kitchen.Qual = as.numeric(factor(Kitchen.Qual,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Functional = as.numeric(factor(Functional,
levels = c("Sal", "Sev",
"Maj2", "Maj1", "Mod",
"Min2","Min1","Typ"))),
Paved.Drive = as.numeric(factor(Paved.Drive,
levels = c("N", "P","Y"))),
Bsmt.Half.Bath = ifelse(is.na(Bsmt.Half.Bath), 0, Lot.Frontage),
Bsmt.Full.Bath = ifelse(is.na(Bsmt.Full.Bath), 0, Lot.Frontage)
)
dat3 = dat2 %>%
dplyr::select(-Condition.2)
train_clean = dat3[dat3$datset == "train",] %>%
dplyr::select(-datset)
test_clean = dat3[dat3$datset == "test",] %>%
dplyr::select(-datset)
validation_clean = dat3[dat3$datset == "valid",] %>%
dplyr::select(-datset)
train = ames_train %>%
mutate(datset = "train")
test = ames_test %>%
mutate(datset = "test")
valid = ames_validation %>%
mutate(datset = "valid")
dat = train %>%
rbind(., test) %>%
rbind(., valid)
findNA = function(col){
numNA = sum(is.na(col) | col == "")
type = class(col)
level = paste(as.character(levels(col)), collapse = ";")
large_0 = sum(table(col) > 0)
return(c(numNA, type, level, large_0))
}
train_info = lapply(dat, findNA)
train_info = as.data.frame(do.call(rbind, train_info), stringsAsFactors = F)
colnames(train_info) = c("numNA", "class", "level")
train_info$numNA = as.numeric(train_info$numNA)
train_info$missing_ratio = train_info$numNA/nrow(ames_train)
train_info$names = rownames(train_info)
dat1 = dat
# Bsmt.Exposure
dat1$Bsmt.Exposure[dat1$Bsmt.Exposure == "" &
!is.na(dat1$Bsmt.Exposure)] = names(sort(table(dat1$Bsmt.Exposure),
decreasing = T))[1]
dat1$Mas.Vnr.Type[dat1$Mas.Vnr.Type == ""] = "None"
dat1$Electrical[dat1$Electrical == ""] = names(sort(table(dat1$Electrical),
decreasing = T))[1]
dat1$BsmtFin.Type.2[dat1$BsmtFin.Type.2 == "" &
!is.na(dat1$BsmtFin.Type.2)] = NA
dat2 = dat1 %>%
dplyr::select(-Garage.Yr.Blt) %>%
filter(PID != 903426160) %>%
mutate(MS.SubClass = as.factor(MS.SubClass),
Lot.Frontage = ifelse(is.na(Lot.Frontage), 0, Lot.Frontage),
Alley = fct_explicit_na(Alley, "Unknown"),
Pool.QC = fct_explicit_na(Pool.QC, "Unknown"),
Pool.QC = as.numeric(factor(Pool.Qc,
levels = c("Unknown", "Fa",
"TA", "Gd", "Ex"))),
Fence = fct_explicit_na(Fence, "Unknown"),
Fence = as.numeric(factor(Fence,
levels = c("Unknown", "MnWw", "GdWo",
"MnPrv", "GdPrv"))),
Misc.Feature = fct_explicit_na(Misc.Feature, "Unknown"),
Fireplace.Qu = fct_explicit_na(Fireplace.Qu, "Unknown"),
Fireplace.Qu = as.numeric(factor(Fireplace.Qu,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Garage.Cond = fct_explicit_na(Garage.Cond, "Unknown"),
Garage.Cond = as.numeric(factor(Garage.Cond,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Garage.Qual = fct_explicit_na(Garage.Qual, "Unknown"),
Garage.Qual = as.numeric(factor(Garage.Qual,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Garage.Type = fct_explicit_na(Garage.Type, "Unknown"),
Garage.Finish = fct_explicit_na(Garage.Finish, "Unknown"),
Garage.Finish = as.numeric(factor(Garage.Finish,
levels = c("Unknown", "Unf",
"RFn", "Fin"))),
Bsmt.Qual = fct_explicit_na(Bsmt.Qual, "Unknown"),
Bsmt.Qual = as.numeric(factor(Bsmt.Qual,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Bsmt.Cond = fct_explicit_na(Bsmt.Cond, "Unknown"),
Bsmt.Cond = as.numeric(factor(Bsmt.Cond,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Bsmt.Exposure = fct_explicit_na(Bsmt.Exposure, "Unknown"),
Bsmt.Exposure = as.numeric(factor(Bsmt.Exposure,
levels = c("Unknown", "No", "Mn",
"Av", "Gd"))),
BsmtFin.Type.1 = fct_explicit_na(BsmtFin.Type.1, "Unknown"),
BsmtFin.Type.1 = as.numeric(factor(BsmtFin.Type.1,
levels = c("Unknown", "Unf","LwQ",
"Rec", "BLQ",
"ALQ", "GLQ"))),
BsmtFin.Type.2 = fct_explicit_na(BsmtFin.Type.2, "Unknown"),
BsmtFin.Type.2 = as.numeric(factor(BsmtFin.Type.2,
levels = c("Unknown", "Unf","LwQ",
"Rec", "BLQ",
"ALQ", "GLQ"))),
Mas.Vnr.Area = ifelse(is.na(Mas.Vnr.Area), 0, Mas.Vnr.Area),
Utilities = as.numeric(factor(Utilities,
levels = c("ELO","NoSeWa","NoSewr","AllPub"))),
Lot.Shape = as.numeric(factor(Lot.Shape,
levels = c("IR3","IR2","IR1","Reg"))),
Exter.Qual= as.numeric(factor(Exter.Qual,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Land.Slope =  as.numeric(factor(Land.Slope,
levels = c("Sev", "Mod","Gtl"))),
Exter.Cond = as.numeric(factor(Exter.Cond,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Heating.QC = as.numeric(factor(Heating.QC,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Electrical = as.numeric(factor(Electrical,
levels = c("Mix", "FuseP",
"FuseF", "FuseA", "SBrkr"))),
Kitchen.Qual = as.numeric(factor(Kitchen.Qual,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Functional = as.numeric(factor(Functional,
levels = c("Sal", "Sev",
"Maj2", "Maj1", "Mod",
"Min2","Min1","Typ"))),
Paved.Drive = as.numeric(factor(Paved.Drive,
levels = c("N", "P","Y"))),
Bsmt.Half.Bath = ifelse(is.na(Bsmt.Half.Bath), 0, Lot.Frontage),
Bsmt.Full.Bath = ifelse(is.na(Bsmt.Full.Bath), 0, Lot.Frontage)
)
train = ames_train %>%
mutate(datset = "train")
test = ames_test %>%
mutate(datset = "test")
valid = ames_validation %>%
mutate(datset = "valid")
dat = train %>%
rbind(., test) %>%
rbind(., valid)
findNA = function(col){
numNA = sum(is.na(col) | col == "")
type = class(col)
level = paste(as.character(levels(col)), collapse = ";")
large_0 = sum(table(col) > 0)
return(c(numNA, type, level, large_0))
}
train_info = lapply(dat, findNA)
train_info = as.data.frame(do.call(rbind, train_info), stringsAsFactors = F)
colnames(train_info) = c("numNA", "class", "level")
train_info$numNA = as.numeric(train_info$numNA)
train_info$missing_ratio = train_info$numNA/nrow(ames_train)
train_info$names = rownames(train_info)
dat1 = dat
# Bsmt.Exposure
dat1$Bsmt.Exposure[dat1$Bsmt.Exposure == "" &
!is.na(dat1$Bsmt.Exposure)] = names(sort(table(dat1$Bsmt.Exposure),
decreasing = T))[1]
dat1$Mas.Vnr.Type[dat1$Mas.Vnr.Type == ""] = "None"
dat1$Electrical[dat1$Electrical == ""] = names(sort(table(dat1$Electrical),
decreasing = T))[1]
dat1$BsmtFin.Type.2[dat1$BsmtFin.Type.2 == "" &
!is.na(dat1$BsmtFin.Type.2)] = NA
dat2 = dat1 %>%
dplyr::select(-Garage.Yr.Blt) %>%
filter(PID != 903426160) %>%
mutate(MS.SubClass = as.factor(MS.SubClass),
Lot.Frontage = ifelse(is.na(Lot.Frontage), 0, Lot.Frontage),
Alley = fct_explicit_na(Alley, "Unknown"),
Pool.QC = fct_explicit_na(Pool.QC, "Unknown"),
Pool.QC = as.numeric(factor(Pool.QC,
levels = c("Unknown", "Fa",
"TA", "Gd", "Ex"))),
Fence = fct_explicit_na(Fence, "Unknown"),
Fence = as.numeric(factor(Fence,
levels = c("Unknown", "MnWw", "GdWo",
"MnPrv", "GdPrv"))),
Misc.Feature = fct_explicit_na(Misc.Feature, "Unknown"),
Fireplace.Qu = fct_explicit_na(Fireplace.Qu, "Unknown"),
Fireplace.Qu = as.numeric(factor(Fireplace.Qu,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Garage.Cond = fct_explicit_na(Garage.Cond, "Unknown"),
Garage.Cond = as.numeric(factor(Garage.Cond,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Garage.Qual = fct_explicit_na(Garage.Qual, "Unknown"),
Garage.Qual = as.numeric(factor(Garage.Qual,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Garage.Type = fct_explicit_na(Garage.Type, "Unknown"),
Garage.Finish = fct_explicit_na(Garage.Finish, "Unknown"),
Garage.Finish = as.numeric(factor(Garage.Finish,
levels = c("Unknown", "Unf",
"RFn", "Fin"))),
Bsmt.Qual = fct_explicit_na(Bsmt.Qual, "Unknown"),
Bsmt.Qual = as.numeric(factor(Bsmt.Qual,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Bsmt.Cond = fct_explicit_na(Bsmt.Cond, "Unknown"),
Bsmt.Cond = as.numeric(factor(Bsmt.Cond,
levels = c("Unknown", "Po", "Fa",
"TA", "Gd", "Ex"))),
Bsmt.Exposure = fct_explicit_na(Bsmt.Exposure, "Unknown"),
Bsmt.Exposure = as.numeric(factor(Bsmt.Exposure,
levels = c("Unknown", "No", "Mn",
"Av", "Gd"))),
BsmtFin.Type.1 = fct_explicit_na(BsmtFin.Type.1, "Unknown"),
BsmtFin.Type.1 = as.numeric(factor(BsmtFin.Type.1,
levels = c("Unknown", "Unf","LwQ",
"Rec", "BLQ",
"ALQ", "GLQ"))),
BsmtFin.Type.2 = fct_explicit_na(BsmtFin.Type.2, "Unknown"),
BsmtFin.Type.2 = as.numeric(factor(BsmtFin.Type.2,
levels = c("Unknown", "Unf","LwQ",
"Rec", "BLQ",
"ALQ", "GLQ"))),
Mas.Vnr.Area = ifelse(is.na(Mas.Vnr.Area), 0, Mas.Vnr.Area),
Utilities = as.numeric(factor(Utilities,
levels = c("ELO","NoSeWa","NoSewr","AllPub"))),
Lot.Shape = as.numeric(factor(Lot.Shape,
levels = c("IR3","IR2","IR1","Reg"))),
Exter.Qual= as.numeric(factor(Exter.Qual,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Land.Slope =  as.numeric(factor(Land.Slope,
levels = c("Sev", "Mod","Gtl"))),
Exter.Cond = as.numeric(factor(Exter.Cond,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Heating.QC = as.numeric(factor(Heating.QC,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Electrical = as.numeric(factor(Electrical,
levels = c("Mix", "FuseP",
"FuseF", "FuseA", "SBrkr"))),
Kitchen.Qual = as.numeric(factor(Kitchen.Qual,
levels = c("Po", "Fa",
"TA", "Gd", "Ex"))),
Functional = as.numeric(factor(Functional,
levels = c("Sal", "Sev",
"Maj2", "Maj1", "Mod",
"Min2","Min1","Typ"))),
Paved.Drive = as.numeric(factor(Paved.Drive,
levels = c("N", "P","Y"))),
Bsmt.Half.Bath = ifelse(is.na(Bsmt.Half.Bath), 0, Lot.Frontage),
Bsmt.Full.Bath = ifelse(is.na(Bsmt.Full.Bath), 0, Lot.Frontage)
)
dat3 = dat2 %>%
dplyr::select(-Condition.2)  # different levels in training and testing data
train_clean = dat3[dat3$datset == "train",] %>%
dplyr::select(-datset)
test_clean = dat3[dat3$datset == "test",] %>%
dplyr::select(-datset)
validation_clean = dat3[dat3$datset == "valid",] %>%
dplyr::select(-datset)
library(lars)
?lars
View(train_clean)
library(lars)
model_lasso = lars(x = train_clean[, -3], y = train_clean[, 3],
type = "lasso")
# ols
model_ols = lm(log(price) ~ . ,
data = train_clean[-c(168,183,462),])
summary(model_ols)
# ols with BIC stepwise variable selection
model_ols_bic = step(model_ols, k = log(nrow(train_clean)))
# ols
model_ols = lm(log(price) ~ . ,
data = train_clean[-c(168,183,462),])
summary(model_ols)
# ols with BIC stepwise variable selection
model_ols_bic = step(model_ols, k = log(nrow(train_clean)), trace = F)
summary(model_ols_bic)
# rmse of training data
predict_ols_bic_train = exp(model_ols_bic$fitted.values)
rmse_ols_bic_train = RMSE(predict_ols_bic_train, train_clean[-c(168,183,462),]$price)
check = function(pred, true_value){
return(data.frame(RMSE = RMSE(pred[,1],true_value),
BIAS = BIAS(pred[,1],true_value),
maxDeviation = maxDeviation(pred[,1],true_value),
MeanAbsDeviation = MeanAbsDeviation(pred[,1],true_value),
Coverage = coverage(pred[,2], pred[,3], true_value)))
}
RMSE = function(y,pred) {
rmse = sqrt(mean((y-pred)^2))
return(rmse)
}
BIAS = function(pred, true_value){
return(mean(pred-true_value))
}
maxDeviation = function(pred, true_value){
return(max(abs(pred-true_value)))
}
MeanAbsDeviation = function(pred, true_value){
return(mean(abs(pred-true_value)))
}
coverage = function(lwr,upr,true_value){
mean(lwr<true_value & true_value<upr)
}
rmse_ols_bic_train = RMSE(predict_ols_bic_train, train_clean[-c(168,183,462),]$price)
predict_ols_bic = predict(model_ols_bic, newdata = test_clean, interval = "predict")
predict_ols_bic = exp(predict_ols_bic)
rmse_ols_bic = RMSE(predict_ols_bic[1,], test_clean$price)
check(predict_ols_bic, test_clean$price)
plot(test_clean$price, predict_ols_bic[,1], )
abline(a=0, b=1)
model_ols_trans = lm(log(price) ~
area + log(Lot.Area + 1) + Neighborhood + Bldg.Type +
Overall.Qual + Overall.Cond +
Year.Built +
# Year.Remod.Add +
Bsmt.Exposure + BsmtFin.SF.1 + BsmtFin.SF.2 + Bsmt.Unf.SF +
Central.Air +
Kitchen.Qual + Functional +
Fireplaces +
Garage.Cars +
# Garage.Area +
Paved.Drive + Open.Porch.SF,
#+ log(Enclosed.Porch + 1) + log(Screen.Porch + 1),
data = train_clean[-c(168,183,462),])
par(mfrow=c(5,5))
plot(model_ols_trans)
par(mfrow=c(2,2))
plot(model_ols_trans)
predict_ols_trans_train = exp(model_ols_trans$fitted.values)
rmse_ols_trans_train = RMSE(predict_ols_trans_train, train_clean[-c(168,183,462),]$price)
predict_ols_trans = predict(model_ols_trans, newdata = test_clean, interval = "predict")
predict_ols_trans = exp(predict_ols_trans)
rmse_ols_trans = RMSE(predict_ols_trans[1,], test_clean$price)
check(predict_ols_trans, test_clean$price)
plot(test_clean$price, predict_ols_trans[,1] )
par(mfrow=c(2,2))
plot(model_ols_trans)
par(mfrow=c(5,5))
t
par(mfrow=c(5,5))
termplot(model = model_ols_trans, partial.resid = T, se = T, rug = T, smooth = panel.smooth)
par(mfrow=c(2,2))
termplot(model = model_ols_bic, partial.resid = T, se = T, rug = T, smooth = panel.smooth)
library(MASS)
#delete columns with colinearity and new levels
delete_list = c(16,74,46,48,39,23,24,25)
model_poi =glm(price ~ .-PID,
data = train_clean[,-delete_list],family="poisson")
model_poi_bic = step(model_poi, k = log(nrow(train_clean)),trace = F)
predict_poi_train = predict(model1.poi, newdata = train_clean)
predict_poi_train = predict(model_poi_bic, newdata = train_clean)
predict_poi_train = exp(predict_poi_train)
